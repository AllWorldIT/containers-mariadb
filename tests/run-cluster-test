#!/bin/sh


function check_tests() {
    test_file=$1

    i=120
    while [ "$i" -gt 0 ]; do
        i=$((i-1))
        if [ -e "data/node1/$test_file" ]; then
            echo "PASSED: Test $test_file on node1"
        fi
        if [ -e "data/node2/$test_file" ]; then
            echo "PASSED: Test $test_file on node2"
        fi
        if [ -e "data/node3/$test_file" ]; then
            echo "PASSED: Test $test_file on node3"
        fi
        if [ -e "data/node1/$test_file" -a -e "data/node2/$test_file" -a -e "data/node3/$test_file" ]; then
            echo "PASSED: PASSED ALL NODES => $test_file"
            break
        fi
        echo "INFO: Waiting for tests to pass ($test_file)... ${i}s"
        sleep 1
    done

    if [ "$i" = 0 ]; then
        return 1
    fi

    return 0
}



[ -d data/node1 ] && rm -rf data/node1
[ -d data/node2 ] && rm -rf data/node2
[ -d data/node3 ] && rm -rf data/node3


mkdir -p data/node1 data/node2 data/node3

# Run in background so we can see the output
docker-compose up --remove-orphans &

# This is run within a very minimal environment, we don't have access to using for i in {180..0} or for ((xxxxxx))
test1_passed=
test2_passed=
test3_passed=
if check_tests MARIADB_CI_PASSED1; then
    echo "NOTICE: Default test set PASSED"
    test1_passed=1
    if check_tests MARIADB_CI_PASSED2; then
        echo "NOTICE: Node 2 test set PASSED"
        test2_passed=1
        if check_tests MARIADB_CI_PASSED3; then
            echo "NOTICE: Node 3 test set PASSED"
            test3_passed=1
        fi
    fi
fi


echo "NOTICE: Shutting down cluster"
docker-compose down --remove-orphans --volumes


if [ -z "$test1_passed" -o -z "$test2_passed" -o -z "$test3_passed" ]; then
	echo "ERROR: Cluster test failed!"
	exit 1
fi

echo "ALL TESTS PASSED!"
